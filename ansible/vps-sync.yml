---
# 此脚本里面的域名取值需要使用目标机器的环境变量 {{ansible_env.SERVER_NAME}}
# 目标机器的环境变量  export SERVER_NAME=test100.stamhe.com
- hosts: myvps
  remote_user: root
  vars:
    - domain_name: "{{ansible_env.SERVER_NAME}}"
    - disk_name: "stamhe-disk"
    - img_block_path: "/dev/mapper/{{disk_name}}"
    - img_path: "/root"
    - img_name: "data.img"
    - img_size: "3G"
    - img_pass: "{{lookup('ini', 'img_pass type=ini section=vpsinfo file=vps-config.ini')}}"  # 获取在控制主机上的某个环境变量的值 ini 文件
    - data_path: "/data"
  tasks:
    - name: ssh-ack-local-task # ansible 主控机执行
      tags: ssh-ack-local-task
      delegate_to: 127.0.0.1
      expect:
        command: 'ssh -i /data/ssh/id_rsa -o ConnectTimeout=10 root@{{domain_name}} "whoami"'
        timeout: 30 
        responses:
          (?i)yes: "yes"
          (?i)Are you sure you want to continue: "yes"
      register: ssh_result
    - debug: msg={{ssh_result}}
    - name: sync-batch-task
      tags: sync-batch-task
      synchronize: "mode=push src={{item.src}}  dest={{item.dest}} rsync_opts=--exclude=*.log partial=yes checksum=yes"
      loop:
        - {src: "/etc/nginx/nginx.conf", dest: "/etc/nginx/nginx.conf"}
        - {src: "~/.screenrc", dest: "~/"}
        - {src: "~/.vimrc", dest: "~/"}
        - {src: "~/.tmux.conf", dest: "~/"}
        - {src: "~/.mytmux.conf", dest: "~/"}
        - {src: "/etc/fail2ban/filter.d/nginx-filter.conf", dest: "/etc/fail2ban/filter.d/"}
        - {src: "/etc/fail2ban/filter.d/nginx-ext-filter.conf", dest: "/etc/fail2ban/filter.d/"}
        - {src: "/data/conf/fail2ban/jail.local.node", dest: "/etc/fail2ban/jail.local"}
    - name: sync-batch-delete-task
      tags: sync-batch-delete-task
      synchronize: "mode=push src={{item.src}}  dest={{item.dest}} rsync_opts=--exclude=*.log partial=yes checksum=yes delete=yes"
      loop:
        - {src: "/etc/letsencrypt/", dest: "/etc/letsencrypt/"}
        - {src: "/etc/nginx/conf.d/", dest: "/etc/nginx/conf.d/"}
        - {src: "/etc/nginx/nginx.conf", dest: "/etc/nginx/nginx.conf"}
        - {src: "/data/app/", dest: "/data/app/"}
        - {src: "/data/shell/", dest: "/data/shell/"}
        - {src: "/usr/share/nginx/html/", dest: "/usr/share/nginx/html/"}
    - name: xray-templates-batch-task
      tags: xray-templates-batch-task
      template: "src={{item.src}} dest={{item.dest}}"
      register: result
      loop:
        # 此模板里面的域名取值需要使用目标机器的环境变量 {{ansible_env.SERVER_NAME}}
        - {src: "test.json.j2", dest: "/data/conf/test.json"}
        - {src: "test2.json.j2", dest: "/data/conf/test2.json"}
        - {src: "tmp/test3.json.j2", dest: "/data/conf/test3.json"}
      notify: 
        - reload-supervisor-handler
        - reload-nginx-handler
        - restart-fail2ban-handler
        - restore-cron-handler
    - name: check-nginx-conf-task
      tags: check-nginx-conf-task
      shell: "/usr/sbin/nginx -t"
    - name: check-nginx-active-task
      tags: check-nginx-active-task
      shell: "systemctl is-active nginx"
      register: ngx_result
      ignore_errors: true # 忽略错误信息
    - name: reload-nginx-task
      tags: reload-nginx-task
      shell: "systemctl reload nginx"
      when: 
        - ngx_result.rc ==  0
    - name: start-nginx-task
      shell: "systemctl start nginx"
      when: 
        - ngx_result.rc !=  0
  handlers:
    - name: reload-supervisor-handler
      shell: "systemctl restart supervisor && sleep 5 && /usr/bin/supervisorctl update"
    - name: reload-nginx-handler
      shell: "systemctl reload nginx"
      ignore_errors: true # 忽略错误信息
    - name: restart-fail2ban-handler
      shell: "systemctl restart fail2ban"
      ignore_errors: true # 忽略错误信息
    - name: restore-cron-handler
      shell: "crontab < /data/conf/crontab-slave.txt"
      ignore_errors: true # 忽略错误信息
